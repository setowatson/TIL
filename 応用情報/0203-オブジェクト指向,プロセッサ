## オブジェクト指向

| 特徴              | 説明                                                               | 例                                                              |
|------------------|------------------------------------------------------------------|-----------------------------------------------------------------|
| **カプセル化・隠蔽**       | データ（変数）とそれに関連するメソッド（関数）を1つのオブジェクトにまとめ、外部から直接アクセスできないようにする。内部実装を隠すことによって、データの安全性と一貫性を保つ。  | `BankAccount` クラスの `balance` プロパティにアクセスするためのメソッド（`deposit`, `withdraw`）を提供し、直接 `balance` を操作できないようにする。 |
| **インヘリタンス・継承**    | 既存のクラス（親クラス）を基に新しいクラス（子クラス）を作成し、親クラスのプロパティやメソッドを引き継ぐことができる。これによりコードの再利用性が高まる。 | `Animal` クラス（親クラス）から `Dog` クラス（子クラス）を作成し、`Dog` が `Animal` のメソッド（例: `eat()`）を継承する。             |
| **ポリモルフィズム・多相性**  | 同じ名前のメソッドや演算子が受け手ごとに異なる動作をすること。オーバーライド（再定義）やオーバーロード（引数による差異）を使って実現する。 | `Shape` クラスに `draw()` メソッドがあり、`Circle` と `Square` でそれぞれ異なる方法で描画処理を行う。 |


## プロセッサ

| 種類                         | 説明                                                               | 特徴                                                             | 例                                                             |
|----------------------------|------------------------------------------------------------------|----------------------------------------------------------------|----------------------------------------------------------------|
| **ホモジニアスマルチコアプロセッサ** | 1つのチップに同じアーキテクチャのコアを複数持つプロセッサ。すべてのコアが同じ処理能力を持つ。 | 同じコアで複数のタスクを並行して処理することで、マルチスレッド性能を向上。 | Intel Core i7（同一アーキテクチャの複数コアを搭載）                  |
| **ヘテロジニアスマルチプロセッサ** | 異なるアーキテクチャや性能のプロセッサを複数搭載するシステム。 | 複数の異なるプロセッサを用いることで、特定のタスクを専用プロセッサで効率よく処理。 | 高性能CPUとGPUを搭載したシステム（例: Apple M1チップ）            |
| **スーパースカラプロセッサ**   | 同時に複数の命令をパイプラインで処理する能力を持つプロセッサ。 | 複数の命令を並列で実行し、命令の処理効率を上げる。              | Intel Pentium Pro（複数命令を並列実行）                        |
| **ソフトコアプロセッサ**     | FPGAやカスタム回路内でソフトウェア的に実装されるプロセッサ。       | ソフトウェア的に設計され、柔軟に機能をカスタマイズできるが、専用ハードウェアより遅い。 | Xilinx Zynq（FPGA上に実装されたソフトコアプロセッサ）            |
